"""
                                              带有上限的 Semaphore
                                                 用于控制线程数量

---------------------------------------------BoundedSemaphore 对象的创建------------------------------------------------
　　信号量无疑是线程同步中最常用的技术了，信号量是一类通用的锁，锁的状态通常就是真或假，但是信号量有一个初始值，这个值往往反映了固定的资源量。

    通过调用：s = threading.Semaphore(max=n)
　　创建一个Python信号量对象，参数 n 指定了信号量的初值 和 上限。

---------------------------------------------BoundedSemaphore对象的方法-----------------------------------------------

# s.acquire(wait=True)
    当 s 的值 > 0 时，acquire() 会将它的值减 1，同时返回 True。
    当 s 的值 = 0 时，需要根据参数 wait 的值进行判断：如果wait为True，acquire() 会阻塞调用它的线程，直到有其他的线程调用 release() 为止；
    如果wait为False，acquire() 会立即返回False，告诉调用自己的线程，当前没有可用的资源。

# s.release()
    当 s 的值 > 0 时，release()会直接将 s 的值加一；
    当 s 的值 = 0 时而当前没有其他等待的线程时，release() 也会将 s 的值加一；
    当 s 的值 = 0 时而当前有其他等待的线程时，release() 不改变 s 的值（还是0），唤醒任意一个等待信号量的线程；调用release()的线程继续正常执行。
"""